{"version":3,"file":"critters.js","sources":["../src/dom.js","../src/css.js","../src/util.js","../src/index.js"],"sourcesContent":["/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\nimport { JSDOM } from 'jsdom';\n\n/**\n * Parse HTML into a mutable, serializable DOM Document.\n * The DOM implementation is an htmlparser2 DOM enhanced with basic DOM mutation methods.\n * @param {String} html   HTML to parse into a Document instance\n */\nexport function createDocument (html) {\n  const jsdom = new JSDOM(html, {\n    contentType: 'text/html'\n  });\n  const { window } = jsdom;\n  const document = window.document;\n  document.$jsdom = jsdom;\n  return document;\n}\n/**\n * Serialize a Document to an HTML String\n * @param {Document} document   A Document, such as one created via `createDocument()`\n */\nexport function serializeDocument (document) {\n  return document.$jsdom.serialize();\n}\n","/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport css from 'css';\n\n/**\n * Parse a textual CSS Stylesheet into a Stylesheet instance.\n * Stylesheet is a mutable ReworkCSS AST with format similar to CSSOM.\n * @see https://github.com/reworkcss/css\n * @private\n * @param {String} stylesheet\n * @returns {css.Stylesheet} ast\n */\nexport function parseStylesheet (stylesheet) {\n  return css.parse(stylesheet);\n}\n\n/**\n * Serialize a ReworkCSS Stylesheet to a String of CSS.\n * @private\n * @param {css.Stylesheet} ast          A Stylesheet to serialize, such as one returned from `parseStylesheet()`\n * @param {Object} options              Options to pass to `css.stringify()`\n * @param {Boolean} [options.compress]  Compress CSS output (removes comments, whitespace, etc)\n */\nexport function serializeStylesheet (ast, options) {\n  return css.stringify(ast, options);\n}\n\n/**\n * Recursively walk all rules in a stylesheet.\n * @private\n * @param {css.Rule} node       A Stylesheet or Rule to descend into.\n * @param {Function} iterator   Invoked on each node in the tree. Return `false` to remove that node.\n */\nexport function walkStyleRules (node, iterator) {\n  if (node.stylesheet) return walkStyleRules(node.stylesheet, iterator);\n\n  node.rules = node.rules.filter(rule => {\n    if (rule.rules) {\n      walkStyleRules(rule, iterator);\n    }\n    return iterator(rule) !== false;\n  });\n}\n","export function tap (inst, hook, pluginName, async, callback) {\n  if (inst.hooks) {\n    const camel = hook.replace(/-([a-z])/g, (s, i) => i.toUpperCase());\n    inst.hooks[camel][async ? 'tapAsync' : 'tap'](pluginName, callback);\n  } else {\n    inst.plugin(hook, callback);\n  }\n}\n","/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport path from 'path';\nimport prettyBytes from 'pretty-bytes';\nimport sources from 'webpack-sources';\nimport { createDocument, serializeDocument } from './dom';\nimport { parseStylesheet, serializeStylesheet, walkStyleRules } from './css';\nimport { tap } from './util';\n\n// Used to annotate this plugin's hooks in Tappable invocations\nconst PLUGIN_NAME = 'critters-webpack-plugin';\n\n/**\n * The mechanism to use for lazy-loading stylesheets.\n * _[JS]_ indicates that a strategy requires JavaScript (falls back to `<noscript>`).\n *\n * - **default:** Move stylesheet links to the end of the document and insert preload meta tags in their place.\n * - **\"body\":** Move all external stylesheet links to the end of the document.\n * - **\"media\":** Load stylesheets asynchronously by adding `media=\"not x\"` and removing once loaded. _[JS]_\n * - **\"swap\":** Convert stylesheet links to preloads that swap to `rel=\"stylesheet\"` once loaded. _[JS]_\n * - **\"js\":** Inject an asynchronous CSS loader similar to [LoadCSS](https://github.com/filamentgroup/loadCSS) and use it to load stylesheets. _[JS]_\n * - **\"js-lazy\":** Like `\"js\"`, but the stylesheet is disabled until fully loaded.\n * @typedef {(default|'body'|'media'|'swap'|'js'|'js-lazy')} PreloadStrategy\n * @public\n */\n\n/**\n * All optional. Pass them to `new Critters({ ... })`.\n * @public\n * @typedef {Object} Options\n * @property {Boolean} external     Inline styles from external stylesheets _(default: `true`)_\n * @property {String} preload       Which {@link PreloadStrategy preload strategy} to use\n * @property {Boolean} noscriptFallback Add `<noscript>` fallback to JS-based strategies\n * @property {Boolean} inlineFonts  Inline critical font-face rules _(default: `false`)_\n * @property {Boolean} preloadFonts Preloads critical fonts _(default: `true`)_\n * @property {Boolean} fonts        Shorthand for setting `inlineFonts`+`preloadFonts`\n *  - values:\n *  - `true` to inline critical font-face rules and preload the fonts\n *  - `false` to don't inline any font-face rules and don't preload fonts\n * @property {Boolean} compress     Compress resulting critical CSS _(default: `true`)_\n */\n\n/**\n * Create a Critters plugin instance with the given options.\n * @public\n * @param {Options} options Options to control how Critters inlines CSS.\n * @example\n * // webpack.config.js\n * module.exports = {\n *   plugins: [\n *     new Critters({\n *       // Outputs: <link rel=\"preload\" onload=\"this.rel='stylesheet'\">\n *       preload: 'swap',\n *\n *       // Don't inline critical font-face rules, but preload the font URLs:\n *       preloadFonts: true\n *     })\n *   ]\n * }\n */\nexport default class Critters {\n  /** @private */\n  constructor (options) {\n    this.options = options || {};\n    this.urlFilter = this.options.filter;\n    if (this.urlFilter instanceof RegExp) {\n      this.urlFilter = this.urlFilter.test.bind(this.urlFilter);\n    }\n  }\n\n  /**\n   * Invoked by Webpack during plugin initialization\n   */\n  apply (compiler) {\n    // hook into the compiler to get a Compilation instance...\n    tap(compiler, 'compilation', PLUGIN_NAME, false, compilation => {\n      // ... which is how we get an \"after\" hook into html-webpack-plugin's HTML generation.\n      if (compilation.hooks.htmlWebpackPluginAfterHtmlProcessing) {\n        tap(compilation, 'html-webpack-plugin-after-html-processing', PLUGIN_NAME, true, (htmlPluginData, callback) => {\n          this.process(compiler, compilation, htmlPluginData.html)\n            .then(html => { callback(null, { html }); })\n            .catch(callback);\n        });\n      } else {\n        // If html-webpack-plugin isn't used, process the first HTML asset as an optimize step\n        tap(compilation, 'optimize-assets', PLUGIN_NAME, true, (assets, callback) => {\n          let htmlAssetName;\n          for (const name in assets) {\n            if (name.match(/\\.html$/)) {\n              htmlAssetName = name;\n              break;\n            }\n          }\n          if (!htmlAssetName) return callback(Error('Could not find HTML asset.'));\n          const html = assets[htmlAssetName].source();\n          if (!html) return callback(Error('Empty HTML asset.'));\n\n          this.process(compiler, compilation, String(html))\n            .then(html => {\n              assets[htmlAssetName] = new sources.RawSource(html);\n              callback();\n            })\n            .catch(callback);\n        });\n      }\n    });\n  }\n\n  /**\n   * Read the contents of a file from Webpack's input filesystem\n   */\n  readFile (filename, encoding) {\n    return new Promise((resolve, reject) => {\n      this.fs.readFile(filename, encoding, (err, data) => {\n        if (err) reject(err);\n        else resolve(data);\n      });\n    });\n  }\n\n  /**\n   * Apply critical CSS processing to html-webpack-plugin\n   */\n  async process (compiler, compilation, html) {\n    const outputPath = compiler.options.output.path;\n\n    // Parse the generated HTML in a DOM we can mutate\n    const document = createDocument(html);\n\n    // `external:false` skips processing of external sheets\n    if (this.options.external !== false) {\n      const externalSheets = [].slice.call(document.querySelectorAll('link[rel=\"stylesheet\"]'));\n      await Promise.all(externalSheets.map(\n        link => this.embedLinkedStylesheet(link, compilation, outputPath)\n      ));\n    }\n\n    // go through all the style tags in the document and reduce them to only critical CSS\n    const styles = [].slice.call(document.querySelectorAll('style'));\n    await Promise.all(styles.map(\n      style => this.processStyle(style, document)\n    ));\n\n    // serialize the document back to HTML and we're done\n    return serializeDocument(document);\n  }\n\n  /**\n   * Inline the target stylesheet referred to by a <link rel=\"stylesheet\"> (assuming it passes `options.filter`)\n   */\n  async embedLinkedStylesheet (link, compilation, outputPath) {\n    const href = link.getAttribute('href');\n    const media = link.getAttribute('media');\n    const document = link.ownerDocument;\n\n    const preloadMode = this.options.preload;\n\n    // skip filtered resources, or network resources if no filter is provided\n    if (this.urlFilter ? this.urlFilter(href) : href.match(/^(https?:)?\\/\\//)) return Promise.resolve();\n\n    // path on disk\n    const filename = path.resolve(outputPath, href.replace(/^\\//, ''));\n\n    // try to find a matching asset by filename in webpack's output (not yet written to disk)\n    const asset = compilation.assets[path.relative(outputPath, filename).replace(/^\\.\\//, '')];\n\n    // Attempt to read from assets, falling back to a disk read\n    const sheet = asset ? asset.source() : await this.readFile(filename, 'utf8');\n\n    // CSS loader is only injected for the first sheet, then this becomes an empty string\n    let cssLoaderPreamble = `function $loadcss(u,m,l){(l=document.createElement('link')).rel='stylesheet';l.href=u;document.head.appendChild(l)}`;\n    const lazy = preloadMode === 'js-lazy';\n    if (lazy) {\n      cssLoaderPreamble = cssLoaderPreamble.replace('l.href', `l.media='only x';l.onload=function(){l.media=m};l.href`);\n    }\n\n    // the reduced critical CSS gets injected into a new <style> tag\n    const style = document.createElement('style');\n    style.appendChild(document.createTextNode(sheet));\n    link.parentNode.insertBefore(style, link.nextSibling);\n\n    // drop a reference to the original URL onto the tag (used for reporting to console later)\n    style.$$name = href;\n\n    // Allow disabling any mutation of the stylesheet link:\n    if (preloadMode === false) return;\n\n    let noscriptFallback = false;\n\n    if (preloadMode === 'body') {\n      document.body.appendChild(link);\n    } else {\n      link.setAttribute('rel', 'preload');\n      link.setAttribute('as', 'style');\n      if (preloadMode === 'js' || preloadMode === 'js-lazy') {\n        const script = document.createElement('script');\n        const js = `${cssLoaderPreamble}$loadcss(${JSON.stringify(href)}${lazy ? (',' + JSON.stringify(media || 'all')) : ''})`;\n        script.appendChild(document.createTextNode(js));\n        link.parentNode.insertBefore(script, link.nextSibling);\n        cssLoaderPreamble = '';\n        noscriptFallback = true;\n      } else if (preloadMode === 'media') {\n        // @see https://github.com/filamentgroup/loadCSS/blob/af1106cfe0bf70147e22185afa7ead96c01dec48/src/loadCSS.js#L26\n        link.setAttribute('rel', 'stylesheet');\n        link.removeAttribute('as');\n        link.setAttribute('media', 'only x');\n        link.setAttribute('onload', `this.media='${media || 'all'}'`);\n        noscriptFallback = true;\n      } else if (preloadMode === 'swap') {\n        link.setAttribute('onload', \"this.rel='stylesheet'\");\n        noscriptFallback = true;\n      } else {\n        const bodyLink = document.createElement('link');\n        bodyLink.setAttribute('rel', 'stylesheet');\n        if (media) bodyLink.setAttribute('media', media);\n        bodyLink.setAttribute('href', href);\n        document.body.appendChild(bodyLink);\n      }\n    }\n\n    if (this.options.noscriptFallback !== false && noscriptFallback) {\n      const noscript = document.createElement('noscript');\n      const noscriptLink = document.createElement('link');\n      noscriptLink.setAttribute('rel', 'stylesheet');\n      noscriptLink.setAttribute('href', href);\n      if (media) noscriptLink.setAttribute('media', media);\n      noscript.appendChild(noscriptLink);\n      link.parentNode.insertBefore(noscript, link.nextSibling);\n    }\n  }\n\n  /**\n   * Parse the stylesheet within a <style> element, then reduce it to contain only rules used by the document.\n   */\n  async processStyle (style) {\n    const options = this.options;\n    const document = style.ownerDocument;\n    const head = document.querySelector('head');\n\n    // basically `.textContent`\n    let sheet = style.childNodes.length > 0 && [].map.call(style.childNodes, node => node.nodeValue).join('\\n');\n\n    // store a reference to the previous serialized stylesheet for reporting stats\n    const before = sheet;\n\n    // Skip empty stylesheets\n    if (!sheet) return;\n\n    const ast = parseStylesheet(sheet);\n\n    // a string to search for font names (very loose)\n    let criticalFonts = '';\n    \n    const failedSelectors = [];\n\n    // Walk all CSS rules, transforming unused rules to comments (which get removed)\n    walkStyleRules(ast, rule => {\n      if (rule.type === 'rule') {\n        // Filter the selector list down to only those matche\n        rule.selectors = rule.selectors.filter(sel => {\n          // Strip pseudo-elements and pseudo-classes, since we only care that their associated elements exist.\n          // This means any selector for a pseudo-element or having a pseudo-class will be inlined if the rest of the selector matches.\n          sel = sel.replace(/::?(?:[a-z-]+)([.[#~&^:*]|\\s|\\n|$)/gi, '$1').trim();\n          try {\n            return document.querySelector(sel) != null;\n          } catch (e) {\n            failedSelectors.push(sel + ' -> ' + e.message);\n            return null;\n          }\n        });\n        // If there are no matched selectors, remove the rule:\n        if (rule.selectors.length === 0) {\n          return false;\n        }\n\n        if (rule.declarations) {\n          for (let i = 0; i < rule.declarations.length; i++) {\n            const decl = rule.declarations[i];\n            if (decl.property.match(/\\bfont\\b/i)) {\n              criticalFonts += ' ' + decl.value;\n            }\n          }\n        }\n      }\n\n      // keep font rules, they're handled in the second pass:\n      if (rule.type === 'font-face') return;\n\n      // If there are no remaining rules, remove the whole rule:\n      return !rule.rules || rule.rules.length !== 0;\n    });\n    \n    if (failedSelectors.length !== 0) {\n      console.warn(\n        `${failedSelectors.length} rules skipped due to selector errors:\\n  `+\n        failedSelectors.join('\\n  ')\n      );\n    }\n\n    const shouldPreloadFonts = options.fonts === true || options.preloadFonts === true;\n    const shouldInlineFonts = options.fonts !== false || options.inlineFonts === true;\n\n    const preloadedFonts = [];\n    walkStyleRules(ast, rule => {\n      // only process @font-face rules in the second pass\n      if (rule.type !== 'font-face') return;\n\n      let family, src;\n      for (let i = 0; i < rule.declarations.length; i++) {\n        const decl = rule.declarations[i];\n        if (decl.property === 'src') {\n          // @todo parse this properly and generate multiple preloads with type=\"font/woff2\" etc\n          src = (decl.value.match(/url\\s*\\(\\s*(['\"]?)(.+?)\\1\\s*\\)/) || [])[2];\n        } else if (decl.property === 'font-family') {\n          family = decl.value;\n        }\n      }\n\n      if (src && shouldPreloadFonts && preloadedFonts.indexOf(src) === -1) {\n        preloadedFonts.push(src);\n        const preload = document.createElement('link');\n        preload.setAttribute('rel', 'preload');\n        preload.setAttribute('as', 'font');\n        if (src.match(/:\\/\\//)) {\n          preload.setAttribute('crossorigin', 'anonymous');\n        }\n        preload.setAttribute('href', src.trim());\n        head.appendChild(preload);\n      }\n\n      // if we're missing info, if the font is unused, or if critical font inlining is disabled, remove the rule:\n      if (!family || !src || criticalFonts.indexOf(family) === -1 || !shouldInlineFonts) return false;\n    });\n\n    sheet = serializeStylesheet(ast, { compress: this.options.compress !== false });\n\n    // If all rules were removed, get rid of the style element entirely\n    if (sheet.trim().length === 0) {\n      if (style.parentNode) {\n        style.parentNode.removeChild(style);\n      }\n    } else {\n      // replace the inline stylesheet with its critical'd counterpart\n      while (style.lastChild) {\n        style.removeChild(style.lastChild);\n      }\n      style.appendChild(document.createTextNode(sheet));\n    }\n\n    // output some stats\n    const name = style.$$name ? style.$$name.replace(/^\\//, '') : 'inline CSS';\n    const percent = sheet.length / before.length * 100 | 0;\n    console.log('\\u001b[32mCritters: inlined ' + prettyBytes(sheet.length) + ' (' + percent + '% of original ' + prettyBytes(before.length) + ') of ' + name + '.\\u001b[39m');\n  }\n}\n\n"],"names":["const","jsdom","JSDOM","this","let"],"mappings":";;;;;;;;AAsBO,SAAS,eAAgB,MAAM;IACpCA,IAAMC,WAAQ,IAAIC,WAAJ,CAAU,MAAM;QAC5B,aAAa;;IAEf,IAAQ;IACRF,IAAM,WAAW,MAAA,CAAO;IACxB,QAAA,CAAS,MAAT,GAAkBC;IAClB,OAAO;;;AAMT,AAAO,SAAS,kBAAmB,UAAU;IAC3C,OAAO,QAAA,CAAS,MAAT,CAAgB,SAAhB;;;ACVF,SAAS,gBAAiB,YAAY;IAC3C,OAAO,GAAA,CAAI,KAAJ,CAAU;;;AAUnB,AAAO,SAAS,oBAAqB,GAAK,EAAA,SAAS;IACjD,OAAO,GAAA,CAAI,SAAJ,CAAc,KAAK;;;AAS5B,AAAO,SAAS,eAAgB,IAAM,EAAA,UAAU;IAC9C,IAAI,IAAA,CAAK;UAAY,OAAO,cAAA,CAAe,IAAA,CAAK,YAAY;IAE5D,IAAA,CAAK,KAAL,GAAa,IAAA,CAAK,KAAL,CAAW,MAAX,WAAkB;QAC7B,IAAI,IAAA,CAAK,OAAO;YACd,cAAA,CAAe,MAAM;;QAEvB,OAAO,QAAA,CAAS,KAAT,KAAmB;;;;ACtDvB,SAAS,IAAK,IAAM,EAAA,IAAM,EAAA,UAAY,EAAA,KAAO,EAAA,UAAU;IAC5D,IAAI,IAAA,CAAK,OAAO;QACdD,IAAM,QAAQ,IAAA,CAAK,OAAL,CAAa,uBAAc,CAAG,EAAA,GAAJ,SAAU,CAAA,CAAE,WAAF;QAClD,IAAA,CAAK,KAAL,CAAW,MAAX,CAAkB,KAAA,GAAQ,aAAa,MAAvC,CAA8C,YAAY;WACrD;QACL,IAAA,CAAK,MAAL,CAAY,MAAM;;;;ACmBtBA,IAAM,cAAc;AAkDpB,IAAqB,WAEnB,kBAAa,SAAS;QACpB,CAAK,OAAL,GAAe,OAAA,IAAW;QAC1B,CAAK,SAAL,GAAiB,IAAA,CAAK,OAAL,CAAa;QAC1B,IAAA,CAAK,SAAL,YAA0B,QAAQ;YACpC,CAAK,SAAL,GAAiB,IAAA,CAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAyB,IAAA,CAAK;;;mBAOnD,wBAAO,UAAU;;;OAEf,CAAI,UAAU,eAAe,aAAa,iBAAO;YAE3C,WAAA,CAAY,KAAZ,CAAkB,sCAAsC;eAC1D,CAAI,aAAa,6CAA6C,aAAa,gBAAO,cAAgB,EAAA,UAAjB;sBAC/E,CAAK,OAAL,CAAa,UAAU,aAAa,cAAA,CAAe,KAAnD,CACG,IADH,WACQ;4BAAU,CAAS,MAAM;8BAAE;;kBADnC,CAEG,KAFH,CAES;;eAEN;eAEL,CAAI,aAAa,mBAAmB,aAAa,gBAAO,MAAQ,EAAA,UAAT;oBACjD;qBACCA,IAAM,QAAQ,QAAQ;wBACrB,IAAA,CAAK,KAAL,CAAW,YAAY;qCACzB,GAAgB;;;;oBAIhB,CAAC;sBAAe,OAAO,QAAA,CAAS,KAAA,CAAM;oBACpC,OAAO,MAAA,CAAO,cAAP,CAAsB,MAAtB;oBACT,CAAC;sBAAM,OAAO,QAAA,CAAS,KAAA,CAAM;sBAEjC,CAAK,OAAL,CAAa,UAAU,aAAa,MAAA,CAAO,MAA3C,CACG,IADH,WACQ;0BACJ,CAAO,cAAP,GAAwB,IAAI,OAAA,CAAQ,SAAZ,CAAsB;4BAC9C;kBAHJ,CAKG,KALH,CAKS;;;;;mBASjB,8BAAU,QAAU,EAAA,UAAU;;;WACrB,IAAI,OAAJ,WAAa,OAAS,EAAA,QAAV;cACjB,CAAK,EAAL,CAAQ,QAAR,CAAiB,UAAU,oBAAW,GAAK,EAAA,MAAN;gBAC/B;kBAAK,MAAA,CAAO;;kBACX,OAAA,CAAQ;;;;mBAQb,4BAAS,QAAU,EAAA,WAAa,EAAA;;;;;qBACjB,QAAA,CAAS,OAAT,CAAiB,MAAjB,CAAwB;mBAG1B,cAAA,CAAe;YAG5B,IAAA,CAAK,OAAL,CAAa,QAAb,KAA0B,OAAO;;6BACZ,EAAA,CAAG,KAAH,CAAS,IAAT,CAAc,QAAA,CAAS,gBAAT,CAA0B;mBACzD,OAAA,CAAQ,GAAR,CAAY,cAAA,CAAe,GAAf,WAChB,eAAQG,MAAA,CAAK,qBAAL,CAA2B,MAAM,aAAa,iBADxD;;;;;;;;;;;qBAMa,EAAA,CAAG,KAAH,CAAS,IAAT,CAAc,QAAA,CAAS,gBAAT,CAA0B;mBACjD,OAAA,CAAQ,GAAR,CAAY,MAAA,CAAO,GAAP,WAChB,gBAASA,MAAA,CAAK,YAAL,CAAkB,OAAO,eADpC;;mCAKO,iBAAA,CAAkB;;;;;;;;;;mBAMrB,wDAAuB,IAAM,EAAA,WAAa,EAAA;;;eACjC,IAAA,CAAK,YAAL,CAAkB;gBACjB,IAAA,CAAK,YAAL,CAAkB;mBACf,IAAA,CAAK;sBAEF,IAAA,CAAK,OAAL,CAAa;YAG7B,IAAA,CAAK,SAAL,GAAiB,IAAA,CAAK,SAAL,CAAe,QAAQ,IAAA,CAAK,KAAL,CAAW;cAAoB,eAAO,OAAA,CAAQ,OAAR;mBAGjE,IAAA,CAAK,OAAL,CAAa,YAAY,IAAA,CAAK,OAAL,CAAa,OAAO;gBAGhD,WAAA,CAAY,MAAZ,CAAmB,IAAA,CAAK,QAAL,CAAc,YAAY,SAA1B,CAAoC,OAApC,CAA4C,SAAS;;gBAGxE;iCAAQ,KAAA,CAAM,MAAN;mBAAuB,IAAA,CAAK,QAAL,CAAc,UAAU,QAA9B;uBAAzB;;wBAAA;oCAGU;uBACX,WAAA,KAAgB;oBACzB,MAAM;qCACR,GAAoB,iBAAA,CAAkB,OAAlB,CAA0B,UAAU;;wBAI5C,QAAA,CAAS,aAAT,CAAuB;qBACrC,CAAM,WAAN,CAAkB,QAAA,CAAS,cAAT,CAAwB;oBAC1C,CAAK,UAAL,CAAgB,YAAhB,CAA6B,OAAO,IAAA,CAAK;qBAGzC,CAAM,MAAN,GAAe;oBAGX,WAAA,KAAgB;sBAAO;mCAEJ;oBAEnB,WAAA,KAAgB,QAAQ;4BAC1B,CAAS,IAAT,CAAc,WAAd,CAA0B;uBACrB;wBACL,CAAK,YAAL,CAAkB,OAAO;wBACzB,CAAK,YAAL,CAAkB,MAAM;wBACpB,WAAA,KAAgB,IAAhB,IAAwB,WAAA,KAAgB,WAAW;;iCACtC,QAAA,CAAS,aAAT,CAAuB;;6BAC3B,mCAAgC,IAAA,CAAK,SAAL,CAAe,UAAQ,IAAA,GAAQ,GAAA,GAAM,IAAA,CAAK,SAAL,CAAe,KAAA,IAAS,SAAU;8BAClH,CAAO,WAAP,CAAmB,QAAA,CAAS,cAAT,CAAwB;4BAC3C,CAAK,UAAL,CAAgB,YAAhB,CAA6B,QAAQ,IAAA,CAAK;yCAC1C,GAAoB;wCACpB,GAAmB;2BACd,IAAI,WAAA,KAAgB,SAAS;4BAElC,CAAK,YAAL,CAAkB,OAAO;4BACzB,CAAK,eAAL,CAAqB;4BACrB,CAAK,YAAL,CAAkB,SAAS;4BAC3B,CAAK,YAAL,CAAkB,6BAAyB,KAAA,IAAS;wCACpD,GAAmB;2BACd,IAAI,WAAA,KAAgB,QAAQ;4BACjC,CAAK,YAAL,CAAkB,UAAU;wCAC5B,GAAmB;2BACd;;mCACY,QAAA,CAAS,aAAT,CAAuB;gCACxC,CAAS,YAAT,CAAsB,OAAO;4BACzB;8BAAO,QAAA,CAAS,YAAT,CAAsB,SAAS;gCAC1C,CAAS,YAAT,CAAsB,QAAQ;gCAC9B,CAAS,IAAT,CAAc,WAAd,CAA0B;;;oBAI1B,IAAA,CAAK,OAAL,CAAa,gBAAb,KAAkC,KAAlC,IAA2C,kBAAkB;;+BAC9C,QAAA,CAAS,aAAT,CAAuB;;mCACnB,QAAA,CAAS,aAAT,CAAuB;gCAC5C,CAAa,YAAb,CAA0B,OAAO;gCACjC,CAAa,YAAb,CAA0B,QAAQ;wBAC9B;0BAAO,YAAA,CAAa,YAAb,CAA0B,SAAS;4BAC9C,CAAS,WAAT,CAAqB;wBACrB,CAAK,UAAL,CAAgB,YAAhB,CAA6B,UAAU,IAAA,CAAK;;;;;;;;;mBAO1C,sCAAc;;YACZ,UAAU,IAAA,CAAK;YACf,WAAW,KAAA,CAAM;YACjB,OAAO,QAAA,CAAS,aAAT,CAAuB;YAGhC,QAAQ,KAAA,CAAM,UAAN,CAAiB,MAAjB,GAA0B,CAA1B,IAA+B,EAAA,CAAG,GAAH,CAAO,IAAP,CAAY,KAAA,CAAM,sBAAY,eAAQ,IAAA,CAAK,aAA3C,CAAsD,IAAtD,CAA2D;YAGhG,SAAS;YAGX,CAAC;cAAO;YAEN,MAAM,eAAA,CAAgB;YAGxB,gBAAgB;YAEd,kBAAkB;sBAGxB,CAAe,eAAK;gBACd,IAAA,CAAK,IAAL,KAAc,QAAQ;oBAExB,CAAK,SAAL,GAAiB,IAAA,CAAK,SAAL,CAAe,MAAf,WAAsB;uBAGrC,GAAM,GAAA,CAAI,OAAJ,CAAY,wCAAwC,KAApD,CAA0D,IAA1D;wBACF;+BACK,QAAA,CAAS,aAAT,CAAuB,IAAvB,IAA+B;qBACtC,QAAO,GAAG;uCACV,CAAgB,IAAhB,CAAqB,GAAA,GAAM,MAAN,GAAe,CAAA,CAAE;+BAC/B;;;oBAIP,IAAA,CAAK,SAAL,CAAe,MAAf,KAA0B,GAAG;2BACxB;;oBAGL,IAAA,CAAK,cAAc;yBAChBC,IAAI,IAAI,EAAG,CAAA,GAAI,IAAA,CAAK,YAAL,CAAkB,QAAQ,CAAA,IAAK;4BAC3C,OAAO,IAAA,CAAK,YAAL,CAAkB;4BAC3B,IAAA,CAAK,QAAL,CAAc,KAAd,CAAoB,cAAc;yCACpC,IAAiB,GAAA,GAAM,IAAA,CAAK;;;;;gBAOhC,IAAA,CAAK,IAAL,KAAc;kBAAa;mBAGxB,CAAC,IAAA,CAAK,KAAN,IAAe,IAAA,CAAK,KAAL,CAAW,MAAX,KAAsB;;YAG1C,eAAA,CAAgB,MAAhB,KAA2B,GAAG;mBAChC,CAAQ,IAAR,CACE,CAAG,eAAA,CAAgB,sDAAnB,GACA,eAAA,CAAgB,IAAhB,CAAqB;;YAInB,qBAAqB,OAAA,CAAQ,KAAR,KAAkB,IAAlB,IAA0B,OAAA,CAAQ,YAAR,KAAyB;YACxE,oBAAoB,OAAA,CAAQ,KAAR,KAAkB,KAAlB,IAA2B,OAAA,CAAQ,WAAR,KAAwB;YAEvE,iBAAiB;sBACvB,CAAe,eAAK;gBAEd,IAAA,CAAK,IAAL,KAAc;kBAAa;gBAE3B,QAAQ;iBACPA,IAAI,IAAI,EAAG,CAAA,GAAI,IAAA,CAAK,YAAL,CAAkB,QAAQ,CAAA,IAAK;oBAC3C,OAAO,IAAA,CAAK,YAAL,CAAkB;oBAC3B,IAAA,CAAK,QAAL,KAAkB,OAAO;uBAE3B,IAAO,IAAA,CAAK,KAAL,CAAW,KAAX,CAAiB,iCAAjB,IAAsD,IAAI;uBAC5D,IAAI,IAAA,CAAK,QAAL,KAAkB,eAAe;0BAC1C,GAAS,IAAA,CAAK;;;gBAId,GAAA,IAAO,kBAAP,IAA6B,cAAA,CAAe,OAAf,CAAuB,IAAvB,KAAgC,CAAC,GAAG;8BACnE,CAAe,IAAf,CAAoB;oBACd,UAAU,QAAA,CAAS,aAAT,CAAuB;uBACvC,CAAQ,YAAR,CAAqB,OAAO;uBAC5B,CAAQ,YAAR,CAAqB,MAAM;oBACvB,GAAA,CAAI,KAAJ,CAAU,UAAU;2BACtB,CAAQ,YAAR,CAAqB,eAAe;;uBAEtC,CAAQ,YAAR,CAAqB,QAAQ,GAAA,CAAI,IAAJ;oBAC7B,CAAK,WAAL,CAAiB;;gBAIf,CAAC,MAAD,IAAW,CAAC,GAAZ,IAAmB,aAAA,CAAc,OAAd,CAAsB,OAAtB,KAAkC,CAAC,CAAtD,IAA2D,CAAC;kBAAmB,OAAO;;aAG5F,GAAQ,mBAAA,CAAoB,KAAK;sBAAY,IAAA,CAAK,OAAL,CAAa,QAAb,KAA0B;;YAGnE,KAAA,CAAM,IAAN,EAAA,CAAa,MAAb,KAAwB,GAAG;gBACzB,KAAA,CAAM,YAAY;qBACpB,CAAM,UAAN,CAAiB,WAAjB,CAA6B;;eAE1B;mBAEE,KAAA,CAAM,WAAW;qBACtB,CAAM,WAAN,CAAkB,KAAA,CAAM;;iBAE1B,CAAM,WAAN,CAAkB,QAAA,CAAS,cAAT,CAAwB;;YAItC,OAAO,KAAA,CAAM,MAAN,GAAe,KAAA,CAAM,MAAN,CAAa,OAAb,CAAqB,OAAO,MAAM;YACxD,UAAU,KAAA,CAAM,MAAN,GAAe,MAAA,CAAO,MAAtB,GAA+B,GAA/B,GAAqC;eACrD,CAAQ,GAAR,CAAY,8BAAA,GAAiC,WAAA,CAAY,KAAA,CAAM,OAAnD,GAA6D,IAA7D,GAAoE,OAApE,GAA8E,gBAA9E,GAAiG,WAAA,CAAY,MAAA,CAAO,OAApH,GAA8H,OAA9H,GAAwI,IAAxI,GAA+I;;;;;;;"}